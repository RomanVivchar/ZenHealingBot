import asyncio
import datetime
import logging
import sys

from aiogram import Dispatcher, F, Router, types
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import CallbackQuery, FSInputFile, Message
from sqlalchemy import select, text
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy.exc import SQLAlchemyError

from ..config.bot_instance import bot
from ..db.database import AsyncSessionLocal
from ..db.models import User
from ..handlers.utilities import send_pdf_document
from ..keyboards.inline import (
    breakfast_kb,
    build_book_consultation_keyboard,
    build_scenario_breakfast_keyboard,
    build_scenario_consultation_keyboard,
    build_scenario_deficits_keyboard,
    build_scenario_overeating_keyboard,
    build_symptoms_keyboard,
    energy_morning_kb,
    intention_kb,
    start_keyboard,
)
from ..states.states import (
    EXCLUSIVE_OPTIONS,
    SCENARIO_RATING,
    SYMPTOM_OPTIONS,
    Quiz,
    SymptomCallback,
    SymptomDoneCallback,
)

common_router = Router(name="common-handlers")
log = logging.getLogger(__name__)


@common_router.message(CommandStart())
async def handle_start(message: Message):

    user_id = message.from_user.id
    last_interaction = datetime.datetime.now(datetime.timezone.utc)

    async with AsyncSessionLocal() as session:
        try:
            values = {"user_id": user_id, "last_interaction": last_interaction}

            #   insert_stmt = insert(User).values(user_id=user_id, last_interaction=last_interaction)
            #   on_conflict_stmt=insert_stmt.on_conflict_do_update(index_elements=[User.user_id], set={User.last_interaction: datetime.datetime.now(datetime.timezone.utc)})

            user = User(user_id=user_id, last_interaction=last_interaction)
            #   await session.add(user)
            #   await session.flush()

            await session.execute(
                text(
                    f"INSERT INTO public.users (user_id, last_interaction) VALUES ({user_id}, '{last_interaction}')"
                )
            )

            await session.commit()

            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø ‚Äî ZenHealingBot. üå± –ü–æ–º–æ–≥–∞—é —Ç–µ–º, –∫—Ç–æ —É—Å—Ç–∞–ª –∂–∏—Ç—å –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ üò¥, –±–æ—Ä–æ—Ç—å—Å—è —Å —Ç–µ–ª–æ–º üí™ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, –∫—É–¥–∞ —É—Ç–µ–∫–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—è. ‚ö°Ô∏è\n\n"
                "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É üîç, –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ üìö –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. üóìÔ∏è\n\n"
                "–ë–µ–∑ –¥–∏–µ—Ç. –ë–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è. –° —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ —Ç–≤–æ–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é. ‚ú®\n\n"
                "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?üëá",
                reply_markup=start_keyboard,
            )

            await message.answer(
                "–ö—Å—Ç–∞—Ç–∏, –í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞ - –∏ —è —Å—Ä–∞–∑—É –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç:\n\n"
                "\n - –°–¢–†–ï–°–° ‚Üí –ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å-–ø—Ä–æ—Ç–æ–∫–æ–ª (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
                "\n - –ó–ê–í–¢–†–ê–ö ‚Üí –ü–æ–ª–µ–∑–Ω—ã–µ –∑–∞–≤—Ç—Ä–∞–∫–∏"
                "\n - –ö–£–•–ù–Ø ‚Üí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫—É—Ö–Ω—è"
                "\n - –ü–ï–†–ï–ï–î–ê–Æ ‚Üí –ö–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–µ—Ä–µ–µ–¥–∞—Ç—å –≤–µ—á–µ—Ä–æ–º"
                "\n - –ê–ü–ü–ï–¢–ò–¢ ‚Üí –ê–ø–ø–µ—Ç–∏—Ç –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"
                "\n - –î–ï–§–ò–¶–ò–¢ ‚Üí –ü–∏—Ç–∞–Ω–∏–µ –ø—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞—Ö"
            )

            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î.", user_id)
        except SQLAlchemyError as e:
            log.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True
            )
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            )

        except Exception as e:
            log.error(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
                exc_info=True,
            )
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            )


@common_router.callback_query(F.data == "main_menu", Command("menu"))
async def main_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞ - –∏ —è —Å—Ä–∞–∑—É –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç:\n\n"
        "\n - –°–¢–†–ï–°–° ‚Üí –ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å-–ø—Ä–æ—Ç–æ–∫–æ–ª (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
        "\n - –ó–ê–í–¢–†–ê–ö ‚Üí –ü–æ–ª–µ–∑–Ω—ã–µ –∑–∞–≤—Ç—Ä–∞–∫–∏"
        "\n - –ö–£–•–ù–Ø ‚Üí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫—É—Ö–Ω—è"
        "\n - –ü–ï–†–ï–ï–î–ê–Æ ‚Üí –ö–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–µ—Ä–µ–µ–¥–∞—Ç—å –≤–µ—á–µ—Ä–æ–º"
        "\n - –ê–ü–ü–ï–¢–ò–¢ ‚Üí –ê–ø–ø–µ—Ç–∏—Ç –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"
        "\n - –î–ï–§–ò–¶–ò–¢ ‚Üí –ü–∏—Ç–∞–Ω–∏–µ –ø—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞—Ö",
        reply_markup=start_keyboard,
    )


# ? –î–æ–±–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏–ª–∏ –Ω–µ—Ç
@common_router.message(Command("help"))
async def handle_help(message: Message):
    await message.answer("–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–ø—Ä–∞–≤–∫–∞ –æ –±–æ—Ç–µ")


@common_router.callback_query(F.data == "diagnostics")
async def diagnostics_energy(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Quiz.energy_morning)
    await callback.message.answer(
        "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —É—Å—Ç–∞–ª–æ—Å—Ç—å –ø–æ —É—Ç—Ä–∞–º?", reply_markup=energy_morning_kb
    )


@common_router.callback_query(StateFilter(Quiz.energy_morning))
async def diagnostics_breakfast(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Quiz.breakfast_habit)
    energy_morning_answer = callback.data
    await state.update_data(energy_morning_answer=energy_morning_answer)

    await callback.message.edit_text(
        "–ß—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ –±—ã–≤–∞–µ—Ç —É —Ç–µ–±—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫?", reply_markup=breakfast_kb
    )


@common_router.callback_query(StateFilter(Quiz.breakfast_habit))
async def diagnostics_symptoms(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Quiz.symptoms)
    breakfast_habit_answer = callback.data
    await state.update_data(breakfast_habit_answer=breakfast_habit_answer)

    keyboard = build_symptoms_keyboard(selected_keys=[])
    await callback.message.edit_text(
        "–ö–∞–∫–∏–µ –∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤ —Ç–µ–±–µ –∑–Ω–∞–∫–æ–º—ã?", reply_markup=keyboard
    )


@common_router.callback_query(SymptomCallback.filter(), StateFilter(Quiz.symptoms))
async def process_symptom_selection(
    callback: CallbackQuery, callback_data: SymptomCallback, state: FSMContext
):
    await callback.answer()

    symptom_key = callback_data.key

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    data = await state.get_data()
    selected_symptoms = data.get("selected_symptoms", [])

    # --- –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ---
    if symptom_key in selected_symptoms:
        # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –£–ñ–ï –±—ã–ª –≤—ã–±—Ä–∞–Ω - —Å–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä
        selected_symptoms.remove(symptom_key)
    else:
        # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ù–ï –±—ã–ª –≤—ã–±—Ä–∞–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ

        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–∞—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ("–í—Å—ë —Å—Ä–∞–∑—É", "–ù–∏—á–µ–≥–æ –∏–∑ —ç—Ç–æ–≥–æ")
        if symptom_key in EXCLUSIVE_OPTIONS:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∏—Å–∫–ª—é—á–∞—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            selected_symptoms = [symptom_key]
        elif any(key in selected_symptoms for key in EXCLUSIVE_OPTIONS):
            # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω –æ–¥–∏–Ω –∏–∑ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤,
            # –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–±—ã—á–Ω—ã–π —Å–∏–º–ø—Ç–æ–º, —Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–∞—é—â–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç
            selected_symptoms = [symptom_key]
        else:
            # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            selected_symptoms.append(symptom_key)

    # --- –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ---
    await state.update_data(selected_symptoms=selected_symptoms)
    # ---------------------------------------

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π ---
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    updated_keyboard = build_symptoms_keyboard(selected_symptoms)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –£–±–µ–¥–∏—Å—å, —á—Ç–æ callback.message –¥–æ—Å—Ç—É–ø–µ–Ω (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫ –æ–Ω –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å)
    if callback.message:
        await callback.message.edit_reply_markup(reply_markup=updated_keyboard)


# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" ---
# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å callback_data —Ç–∏–ø–∞ SymptomsDoneCallback
@common_router.callback_query(SymptomDoneCallback.filter(), StateFilter(Quiz.symptoms))
async def process_symptoms_done(callback: types.CallbackQuery, state: FSMContext):
    # –û—Ç–≤–µ—Ç—å –Ω–∞ –∫–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
    await callback.answer("–í—ã–±–æ—Ä —Å–∏–º–ø—Ç–æ–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")

    # --- –ü–æ–ª—É—á–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö ---
    data = await state.get_data()
    final_selections_keys = data.get("selected_symptoms", [])
    # -------------------------------------------------------

    # --- –¢–≤–æ—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ "–≤—Å—ë —Å—Ä–∞–∑—É" ---
    symptom_counter = 0
    is_all_at_once_flag = False

    if "all_at_once" in final_selections_keys:
        is_all_at_once_flag = True
        # –ï—Å–ª–∏ "–í—Å—ë —Å—Ä–∞–∑—É" –≤—ã–±—Ä–∞–Ω–æ, —Å—á–µ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤
        # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–ª–∞–≥ –∏ –Ω–µ —Å—á–∏—Ç–∞—Ç—å, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–π –¥–∞–ª—å–Ω–µ–π—à–µ–π –ª–æ–≥–∏–∫–∏
        # symptom_counter = len(SYMPTOM_OPTIONS) - len(EXCLUSIVE_OPTIONS) # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    elif "none_of_these" in final_selections_keys:
        symptom_counter = 0
        is_all_at_once_flag = False
    else:
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤
        standard_symptom_keys = [
            key for key in final_selections_keys if key not in EXCLUSIVE_OPTIONS
        ]
        symptom_counter = len(standard_symptom_keys)
        is_all_at_once_flag = False

    print(f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Å–∏–º–ø—Ç–æ–º–æ–≤ (–∫–ª—é—á–∏): {final_selections_keys}")
    print(f"–ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤: {symptom_counter}")
    print(f"–§–ª–∞–≥ '–í—Å—ë —Å—Ä–∞–∑—É': {is_all_at_once_flag}")

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ---
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.update_data(
        symptoms_selected_keys=final_selections_keys,  # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º–∏ –∫–ª—é—á–∏
        symptoms_count=symptom_counter,
        symptoms_all_flag=is_all_at_once_flag,
    )
    # –¢–µ–ø–µ—Ä—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –æ–ø—Ä–æ—Å–∞

    # –ò–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–¥–µ—Å—å

    # -------------------------------------------------------------------------------

    # --- –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ ---
    await callback.message.edit_text(
        "–ß–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?", reply_markup=intention_kb
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤ FSM
    await state.set_state(Quiz.offer)
    # –ò–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å:
    # await state.clear()


@common_router.callback_query(StateFilter(Quiz.offer))
async def offer(callback: CallbackQuery, state: FSMContext, bot=bot):

    await callback.answer()
    intention_answer = callback.data
    await state.update_data(intention_answer=intention_answer)

    quiz_results = await state.get_data()

    await state.clear()

    energy_morning = quiz_results.get("energy_morning_answer")
    breakfast_habit = quiz_results.get("breakfast_habit_answer")
    symptoms_count = quiz_results.get("symptoms_count")
    user_intention = quiz_results.get("intention_answer")
    symptoms_all_flag = quiz_results.get("symptoms_all_flag")
    symptoms_selected_keys = quiz_results.get(
        "symptoms_selected_keys", []
    )  # –ü–æ–ª—É—á–∞–µ–º –∏ –∫–ª—é—á–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤

    # --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è ---
    rating = 0  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
    final_message_text = ""
    final_keyboard = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    list_deficits = ["hair_loss", "skin_problems", "mood_swings", "sleep_disorders"]
    count_deficits = 0

    for el in list_deficits:
        if el in symptoms_selected_keys:
            count_deficits += 1

    # * –°—Ü–µ–Ω–∞—Ä–∏–π 1. –ì–∞–π–¥ "–ü–∏—Ç–∞–Ω–∏–µ –ø—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞—Ö"
    if user_intention == "–î–µ—Ñ–∏—Ü–∏—Ç—ã":
        rating = max(SCENARIO_RATING["deficits"], rating)
    elif energy_morning == "–í—Å–µ–≥–¥–∞":
        rating = max(SCENARIO_RATING["deficits"], rating)
    elif count_deficits >= 2:
        rating = max(SCENARIO_RATING["deficits"], rating)

    list_overeating = ["often_overeating", "sugar_craving"]
    count_overeating = 0
    for el in list_overeating:
        if el in symptoms_selected_keys:
            count_overeating += 1

    # * –°—Ü–µ–Ω–∞—Ä–∏–π 2. –ì–∞–π–¥ "–ö–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–µ—Ä–µ–µ–¥–∞—Ç—å –≤–µ—á–µ—Ä–æ–º"
    if user_intention == "–ü–µ—Ä–µ–µ–¥–∞–Ω–∏–µ":
        rating = max(SCENARIO_RATING["overeating"], rating)
    elif count_overeating >= 1:
        rating = max(SCENARIO_RATING["overeating"], rating)

    # * –°—Ü–µ–Ω–∞—Ä–∏–π 3. –ì–∞–π–¥ "–ó–∞–≤—Ç—Ä–∞–∫ –±–µ–∑ —Ö–∞–æ—Å–∞"
    if user_intention == "–ó–∞–≤—Ç—Ä–∞–∫":
        rating = max(SCENARIO_RATING["breakfast"], rating)
    elif (
        energy_morning in ["–ò–Ω–æ–≥–¥–∞", "–í—Å–µ–≥–¥–∞"]
        and breakfast_habit != "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫"
    ):
        rating = max(SCENARIO_RATING["breakfast"], rating)
    elif breakfast_habit in ["–ù–µ–∑–∞–≤—Ç—Ä–∞–∫", "–ü–µ—Ä–µ–∫—É—Å"]:
        rating = max(SCENARIO_RATING["breakfast"], rating)

    # * –°—Ü–µ–Ω–∞—Ä–∏–π 4. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    if symptoms_count >= 3:
        rating = max(SCENARIO_RATING["consultation"], rating)
    elif energy_morning == "–í—Å–µ–≥–¥–∞":
        rating = max(SCENARIO_RATING["consultation"], rating)
    elif user_intention == "–ù–µ–∑–Ω–∞—é":
        rating = max(SCENARIO_RATING["consultation"], rating)

    # * –í—ã–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
    if rating == 4:  # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        final_message_text = (
            "–¢—ã —É–∫–∞–∑–∞–ª(–∞) –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤, –∏ –∫–∞–∂–µ—Ç—Å—è, –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π."
            "–ß—Ç–æ–±—ã –Ω–µ –≥–∞–¥–∞—Ç—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
            "–ú—ã —Ä–∞–∑–±–µ—Ä—ë–º —Ç–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é, —è –ø–æ–º–æ–≥—É —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–¥—Å–∫–∞–∂—É, —Å —á–µ–≥–æ —Ç–æ—á–Ω–æ —Å—Ç–æ–∏—Ç –Ω–∞—á–∞—Ç—å."
        )
        final_keyboard = build_scenario_consultation_keyboard
    elif rating == 3:  # –î–µ—Ñ–∏—Ü–∏—Ç—ã
        final_message_text = (
            "–ü–æ—Ö–æ–∂–µ, —Ç–≤–æ—ë —Ç–µ–ª–æ –¥–∞—ë—Ç —Å–∏–≥–Ω–∞–ª—ã –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤."
            "–Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –≥–∞–π–¥–∞ ¬´–ü–∏—Ç–∞–Ω–∏–µ –ø—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞—Ö¬ª "
            "‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç –º—è–≥–∫–æ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏ –≤–µ—Ä–Ω—É—Ç—å —ç–Ω–µ—Ä–≥–∏—é."
        )
        final_keyboard = build_scenario_deficits_keyboard
    elif rating == 2:  # –ü–µ—Ä–µ–µ–¥–∞–Ω–∏—è
        final_message_text = (
            " –ü–æ—Ö–æ–∂–µ, —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–æ –Ω–∞–ª–∞–¥–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å –∞–ø–ø–µ—Ç–∏—Ç–æ–º –∏ —Ä–∏—Ç–º–æ–º –ø–∏—Ç–∞–Ω–∏—è."
            "–ù–∞—á–Ω–∏ —Å –≥–∞–π–¥–∞ ¬´–ö–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–µ—Ä–µ–µ–¥–∞—Ç—å –≤–µ—á–µ—Ä–æ–º¬ª"
            " ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–µ—Ä–Ω—É—Ç—å –æ—â—É—â–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è."
        )
        final_keyboard = build_scenario_overeating_keyboard
    elif rating == 1:  # –ó–∞–≤—Ç—Ä–∞–∫
        final_message_text = (
            "–ß–∞—Å—Ç–æ –ø—É—Ç—å –∫ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —É—Ç—Ä–∞."
            "–Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≥–∞–π–¥ ¬´–ó–∞–≤—Ç—Ä–∞–∫ –±–µ–∑ —Ö–∞–æ—Å–∞¬ª ‚Äî"
            " –æ–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–æ–∫–æ–π–Ω—ã–π, "
            "—Å—ã—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–Ω—è –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ—Å—É—Ä—Å."
        )
        final_keyboard = build_scenario_breakfast_keyboard

    # --- –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    # –í —ç—Ç–æ–º –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è.

    chat_id_to_send = callback.message.chat.id  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å

    await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!")
    await bot.send_message(
        chat_id=chat_id_to_send, text=final_message_text, reply_markup=final_keyboard
    )


# TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
@common_router.callback_query(F.data == "about_consultation")
async def about_consultation(callback: CallbackQuery):
    await callback.answer()
    try:
        await callback.message.answer(
            "–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
            reply_markup=build_book_consultation_keyboard,
        )
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ {e}")


# TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–∏–Ω–∫ –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥
@common_router.callback_query(F.data == "just_read")
async def just_read(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "- –õ–∏–Ω–∫ –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥ (–∫–∞—Ç–∞–ª–æ–≥ –≥–∞–π–¥–æ–≤)"
        "\n- Telegram-–∫–∞–Ω–∞–ª: https://t.me/eatwithoutstress"
        "\n- Instagram: https://www.instagram.com/healthy_oks"
    )
